n = 10
)
writeTopN(
deObj = lncFit,
cpm = lncNormCounts,
samples = lncSamples,
contrast = "GroupHFrEF.VisitVisit2",
x1 = "Group",
outString =  "TargetNominations2/lncRNA/Interaction/limma-voom-interaction",
n = 11
)
writeTopN(
deObj = lncFit,
cpm = lncNormCounts,
samples = lncSamples,
contrast = "GroupHFrEF",
x1 = "Group",
# include this to write files for end users upon bookdown compile, delete to render plots to book
# outString =  "analyses/TargetNominations2/lncRNA/Group/limma-voom-group",
n = 12
)
writeTopN(
deObj = lncFit,
cpm = lncNormCounts,
samples = lncSamples,
contrast = "GroupHFrEF",
x1 = "Group",
# include this to write files for end users upon bookdown compile, delete to render plots to book
outString =  "analyses/TargetNominations2/lncRNA/Group/limma-voom-group",
n = 12
)
writeTopN(
deObj = lncFit,
cpm = lncNormCounts,
samples = lncSamples,
contrast = "GroupHFrEF",
x1 = "Group",
# include this to write files for end users upon bookdown compile, delete to render plots to book
outString =  "TargetNominations2/lncRNA/Group/limma-voom-group",
n = 12
)
d <- mtcars
d
d <- mtcars
d$thing <- lapply(d$cyl, function(x){ifelse(x < 4, "yes", "no")})
d
d <- mtcars
d$thing <- sapply(d$cyl, function(x){ifelse(x < 4, "yes", "no")})
d
d <- mtcars
d$thing <- sapply(d$cyl, function(x){ifelse(x < 6, "yes", "no")})
d
writeTopN <- function(deObj, samples, contrast, x1, n, outString = NULL, cpm = NULL)
{
# This is the function that does the plotting. It's made into a sub-function so that I can
# call it normally to show the results or in between pdf()/dev.off() to write the results
# the disk without have to duplicate the code.
plotTopN <- function()
{
# show the top N as a table
resTopN %>% print
# for each of the top N, make a plot
for(i in 1:nrow(resTopN)) {
# the gene in question
geneName <- rownames(resTopN)[i]
# get the counts data based on the tool
if(deTool == "limma-voom"){
dGene <- prepLVCounts(cpm, geneName, samples)
} else {
dGene <- prepDESeq2Counts(deObj, geneName, samples)
}
# add a star to the name is it's in significant post-pval adjustment
if(resTopN[, sigCol][i] < 0.05) {
geneName <- paste0(geneName, "*")
}
# plot the gene
plotGene(dGene, x1 = x1, x2 = "MergedGroup", colorBy = x1, name = geneName) %>% print
}
}
# the first step is to see if we're dealing with lv or DESeq2
if(class(deObj) == "MArrayLM") {
# set the tool name and the significance column
deTool <- "limma-voom"
sigCol <- "adj.P.Val"
# get all the results with p adjusted sorted
resAll <- topTable(deObj, coef = coefByString(contrast), n = Inf) %>%
arrange(adj.P.Val)
resSig <- resAll %>%
filter(adj.P.Val < 0.05)
} else {
deTool <- "DESeq2"
sigCol <- "padj"
resAll <- results(deObj, contrast = list(contrast)) %>%
data.frame %>%
arrange(padj)
resSig <- resAll %>%
filter(padj < 0.05)
}
print(paste0("Number of significant after MH correction: ", nrow(resSig)))
# after the sort, there the first N are our top N
resTopN <- resAll[1:n, ]
# displays the plots in the book
if(is.null(outString)){
plotTopN()
# writes the plots to share
} else {
csvOut <- paste0(outString, "-top", n, ".csv")
pdfOut <- paste0(outString, "-top", n, ".pdf")
# write the plots to a pdf
pdf(pdfOut)
plotTopN()
dev.off()
resTopN$list <- sapply(resTopN[, sigCol], function(x){ifelse(x < 0.05, "A", "B")})
write.csv(resTopN, csvOut)
}
}
writeTopN(
deObj = lncFit,
cpm = lncNormCounts,
samples = lncSamples,
contrast = "GroupHFrEF",
x1 = "Group",
# include this to write files for end users upon bookdown compile, delete to render plots to book
outString =  "TargetNominations2/lncRNA/Group/limma-voom-group",
n = 12
)
system("./buildBook.sh")
writeTopN <- function(deObj, samples, contrast, x1, n, outString = NULL, cpm = NULL)
{
# This is the function that does the plotting. It's made into a sub-function so that I can
# call it normally to show the results or in between pdf()/dev.off() to write the results
# the disk without have to duplicate the code.
plotTopN <- function()
{
# for each of the top N, make a plot
for(i in 1:nrow(resTopN)) {
# the gene in question
geneName <- rownames(resTopN)[i]
# get the counts data based on the tool
if(deTool == "limma-voom"){
dGene <- prepLVCounts(cpm, geneName, samples)
} else {
dGene <- prepDESeq2Counts(deObj, geneName, samples)
}
# add a star to the name is it's in significant post-pval adjustment
if(resTopN[, sigCol][i] < 0.05) {
geneName <- paste0(geneName, "*")
}
# plot the gene
plotGene(dGene, x1 = x1, x2 = "MergedGroup", colorBy = x1, name = geneName) %>% print
}
}
# the first step is to see if we're dealing with lv or DESeq2
if(class(deObj) == "MArrayLM") {
# set the tool name and the significance column
deTool <- "limma-voom"
sigCol <- "adj.P.Val"
# get all the results with p adjusted sorted
resAll <- topTable(deObj, coef = coefByString(contrast), n = Inf) %>%
arrange(adj.P.Val)
resSig <- resAll %>%
filter(adj.P.Val < 0.05)
} else {
deTool <- "DESeq2"
sigCol <- "padj"
resAll <- results(deObj, contrast = list(contrast)) %>%
data.frame %>%
arrange(padj)
resSig <- resAll %>%
filter(padj < 0.05)
}
# note number of sig genes in case it's > n
print(paste0("Number of significant after MH correction: ", nrow(resSig)))
# show the top N as a table
resTopN %>% reactable
# after the sort, there the first N are our top N
resTopN <- resAll[1:n, ]
# assign "A" to transcripts with padj < 0.05
resTopN$list <- sapply(resTopN[, sigCol], function(x){ifelse(x < 0.05, "A", "B")})
# displays the plots in the book
if(is.null(outString)){
plotTopN()
# writes the plots to share
} else {
csvOut <- paste0(outString, "-top", n, ".csv")
pdfOut <- paste0(outString, "-top", n, ".pdf")
# write the plots to a pdf
pdf(pdfOut)
plotTopN()
dev.off()
write.csv(resTopN, csvOut)
}
}
writeTopN(
deObj = lncDESeq2Obj,
samples = lncSamples,
contrast = "GroupHFrEF",
x1 = "Group",
# outString =  "analyses/TargetNominations2/lncRNA/Group/DESeq2-group",
n = 10
)
writeTopN <- function(deObj, samples, contrast, x1, n, outString = NULL, cpm = NULL)
{
# This is the function that does the plotting. It's made into a sub-function so that I can
# call it normally to show the results or in between pdf()/dev.off() to write the results
# the disk without have to duplicate the code.
plotTopN <- function()
{
# for each of the top N, make a plot
for(i in 1:nrow(resTopN)) {
# the gene in question
geneName <- rownames(resTopN)[i]
# get the counts data based on the tool
if(deTool == "limma-voom"){
dGene <- prepLVCounts(cpm, geneName, samples)
} else {
dGene <- prepDESeq2Counts(deObj, geneName, samples)
}
# add a star to the name is it's in significant post-pval adjustment
if(resTopN[, sigCol][i] < 0.05) {
geneName <- paste0(geneName, "*")
}
# plot the gene
plotGene(dGene, x1 = x1, x2 = "MergedGroup", colorBy = x1, name = geneName) %>% print
}
}
# the first step is to see if we're dealing with lv or DESeq2
if(class(deObj) == "MArrayLM") {
# set the tool name and the significance column
deTool <- "limma-voom"
sigCol <- "adj.P.Val"
# get all the results with p adjusted sorted
resAll <- topTable(deObj, coef = coefByString(contrast), n = Inf) %>%
arrange(adj.P.Val)
resSig <- resAll %>%
filter(adj.P.Val < 0.05)
} else {
deTool <- "DESeq2"
sigCol <- "padj"
resAll <- results(deObj, contrast = list(contrast)) %>%
data.frame %>%
arrange(padj)
resSig <- resAll %>%
filter(padj < 0.05)
}
# note number of sig genes in case it's > n
print(paste0("Number of significant after MH correction: ", nrow(resSig)))
# after the sort, there the first N are our top N
resTopN <- resAll[1:n, ]
# assign "A" to transcripts with padj < 0.05
resTopN$list <- sapply(resTopN[, sigCol], function(x){ifelse(x < 0.05, "A", "B")})
# show the top N as a table
resTopN %>% reactable
# displays the plots in the book
if(is.null(outString)){
plotTopN()
# writes the plots to share
} else {
csvOut <- paste0(outString, "-top", n, ".csv")
pdfOut <- paste0(outString, "-top", n, ".pdf")
# write the plots to a pdf
pdf(pdfOut)
plotTopN()
dev.off()
write.csv(resTopN, csvOut)
}
}
writeTopN(
deObj = lncDESeq2Obj,
samples = lncSamples,
contrast = "GroupHFrEF",
x1 = "Group",
# outString =  "analyses/TargetNominations2/lncRNA/Group/DESeq2-group",
n = 10
)
system("./buildBook.sh")
writeTopN <- function(deObj, samples, contrast, x1, n, outString = NULL, cpm = NULL)
{
# This is the function that does the plotting. It's made into a sub-function so that I can
# call it normally to show the results or in between pdf()/dev.off() to write the results
# the disk without have to duplicate the code.
plotTopN <- function()
{
# for each of the top N, make a plot
for(i in 1:nrow(resTopN)) {
# the gene in question
geneName <- rownames(resTopN)[i]
# get the counts data based on the tool
if(deTool == "limma-voom"){
dGene <- prepLVCounts(cpm, geneName, samples)
} else {
dGene <- prepDESeq2Counts(deObj, geneName, samples)
}
# add a star to the name is it's in significant post-pval adjustment
if(resTopN[, sigCol][i] < 0.05) {
geneName <- paste0(geneName, "*")
}
# plot the gene
plotGene(dGene, x1 = x1, x2 = "MergedGroup", colorBy = x1, name = geneName) %>% print
}
}
# the first step is to see if we're dealing with lv or DESeq2
if(class(deObj) == "MArrayLM") {
# set the tool name and the significance column
deTool <- "limma-voom"
sigCol <- "adj.P.Val"
# get all the results with p adjusted sorted
resAll <- topTable(deObj, coef = coefByString(contrast), n = Inf) %>%
arrange(adj.P.Val)
resSig <- resAll %>%
filter(adj.P.Val < 0.05)
} else {
deTool <- "DESeq2"
sigCol <- "padj"
resAll <- results(deObj, contrast = list(contrast)) %>%
data.frame %>%
arrange(padj)
resSig <- resAll %>%
filter(padj < 0.05)
}
# note number of sig genes in case it's > n
print(paste0("Number of significant after MH correction: ", nrow(resSig)))
# after the sort, there the first N are our top N
resTopN <- resAll[1:n, ]
# assign "A" to transcripts with padj < 0.05
resTopN$list <- sapply(resTopN[, sigCol], function(x){ifelse(x < 0.05, "A", "B")})
# displays the plots in the book
if(is.null(outString)){
plotTopN()
# writes the plots to share
} else {
csvOut <- paste0(outString, "-top", n, ".csv")
pdfOut <- paste0(outString, "-top", n, ".pdf")
# write the plots to a pdf
pdf(pdfOut)
plotTopN()
dev.off()
write.csv(resTopN, csvOut)
}
resTopN
}
writeTopN(
deObj = lncDESeq2Obj,
samples = lncSamples,
contrast = "GroupHFrEF",
x1 = "Group",
# outString =  "analyses/TargetNominations2/lncRNA/Group/DESeq2-group",
n = 10
) %>% reactable(searchable = TRUE)
system("./buildBook.sh")
system("./buildBook.sh")
system("./buildBook.sh")
system("./buildBook.sh")
system("./buildBook.sh")
system("./buildBook.sh")
setwd("~/Dropbox (Partners HealthCare)/Workspace/RPackages/ContrApption")
# devtools::install(); library(ContrApption); ContrApption("test"), x = c(1, 2, 3, 4, 5), y = c(1, 2, 4, 8, 16))
# devtools::install(); library(ContrApption); ContrApption("test", x = c(1, 2, 3, 4, 5), y = c(1, 2, 4, 8, 16))
# devtools::install(); library(ContrApption); ContrApption("test", "test2")
library(DESeq2)
library(dplyr)
dds <- readRDS("dev/lncDESeq2Obj.Rds")
d <- counts(dds, normalized = TRUE)
d
d <- counts(dds, normalized = TRUE)
d %>% head
annotation <- colData(dds)
annotation <- colData(dds)
annotation <- colData(dds)
annotattion
annotation <- colData(dds)
annotation
devtools::install(); library(ContrApption); ContrApption("test",
x = c(1, 2, 3, 4, 5),
y = c(1, 2, 4, 8, 16),
data = d,
annotation = annotation,
idCol = "SampleID",
groupCol = "Group")
devtools::install(); library(ContrApption); ContrApption("test",
x = c(1, 2, 3, 4, 5),
y = c(1, 2, 4, 8, 16),
data = d,
annotation = annotation,
idCol = "SampleID",
groupCol = "Group")
devtools::install(); library(ContrApption); ContrApption("test",
x = c(1, 2, 3, 4, 5),
y = c(1, 2, 4, 8, 16),
data = d,
annotation = annotation,
idCol = "SampleID",
groupCol = "Group")
devtools::install(); library(ContrApption); ContrApption("test",
x = c(1, 2, 3, 4, 5),
y = c(1, 2, 4, 8, 16),
data = d,
annotation = annotation,
idCol = "SampleID",
groupCol = "Group")
devtools::install(); library(ContrApption); ContrApption("test",
x = c(1, 2, 3, 4, 5),
y = c(1, 2, 4, 8, 16),
data = d,
annotation = annotation,
idCol = "SampleID",
groupCol = "Group")
devtools::install(); library(ContrApption); ContrApption("test",
x = c(1, 2, 3, 4, 5),
y = c(1, 2, 4, 8, 16),
data = d,
annotation = annotation,
idCol = "SampleID",
groupCol = "Group")
devtools::install(); library(ContrApption); ContrApption("test",
x = c(1, 2, 3, 4, 5),
y = c(1, 2, 4, 8, 16),
data = d,
annotation = annotation,
idCol = "SampleID",
groupCol = "Group")
devtools::install(); library(ContrApption); ContrApption("test",
x = c(1, 2, 3, 4, 5),
y = c(1, 2, 4, 8, 16),
data = d,
annotation = annotation,
idCol = "SampleID",
groupCol = "Group")
devtools::install(); library(ContrApption); ContrApption("test",
x = c(1, 2, 3, 4, 5),
y = c(1, 2, 4, 8, 16),
data = d,
annotation = annotation,
idCol = "SampleID",
groupCol = "Group")
devtools::install(); library(ContrApption); ContrApption("test",
x = c(1, 2, 3, 4, 5),
y = c(1, 2, 4, 8, 16),
data = d,
annotation = annotation,
idCol = "SampleID",
groupCol = "Group")
devtools::install(); library(ContrApption); ContrApption("test",
x = c(1, 2, 3, 4, 5),
y = c(1, 2, 4, 8, 16),
data = d,
annotation = annotation,
idCol = "SampleID",
groupCol = "Group")
devtools::install(); library(ContrApption); ContrApption("test",
x = c(1, 2, 3, 4, 5),
y = c(1, 2, 4, 8, 16),
data = d,
annotation = annotation,
idCol = "SampleID",
groupCol = "Group")
devtools::install(); library(ContrApption); ContrApption("test",
x = c(1, 2, 3, 4, 5),
y = c(1, 2, 4, 8, 16),
data = d,
annotation = annotation,
idCol = "SampleID",
groupCol = "Group")
devtools::install(); library(ContrApption); ContrApption("test",
x = c(1, 2, 3, 4, 5),
y = c(1, 2, 4, 8, 16),
data = d,
annotation = annotation,
idCol = "SampleID",
groupCol = "Group")
devtools::install(); library(ContrApption); ContrApption("test",
x = c(1, 2, 3, 4, 5),
y = c(1, 2, 4, 8, 16),
data = d,
annotation = annotation,
idCol = "SampleID",
groupCol = "Group")
devtools::install(); library(ContrApption); ContrApption("test",
x = c(1, 2, 3, 4, 5),
y = c(1, 2, 4, 8, 16),
data = d,
annotation = annotation,
idCol = "SampleID",
groupCol = "Group")
devtools::install(); library(ContrApption); ContrApption("test",
x = c(1, 2, 3, 4, 5),
y = c(1, 2, 4, 8, 16),
data = d,
annotation = annotation,
idCol = "SampleID",
groupCol = "Group")
devtools::install(); library(ContrApption); ContrApption("test",
x = c(1, 2, 3, 4, 5),
y = c(1, 2, 4, 8, 16),
data = d,
annotation = annotation,
idCol = "SampleID",
groupCol = "Group")
devtools::install(); library(ContrApption); ContrApption("test",
x = c(1, 2, 3, 4, 5),
y = c(1, 2, 4, 8, 16),
data = d,
annotation = annotation,
idCol = "SampleID",
groupCol = "Group")
devtools::install(); library(ContrApption); ContrApption("test",
x = c(1, 2, 3, 4, 5),
y = c(1, 2, 4, 8, 16),
data = d,
annotation = annotation,
idCol = "SampleID",
groupCol = "Group")
